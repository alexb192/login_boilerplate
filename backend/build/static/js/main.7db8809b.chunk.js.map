{"version":3,"sources":["images/biscord.png","stores/UserStore.js","SubmitButton.js","InputField.js","LoginForm/LoginForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","extendObservable","this","loading","isLoggedIn","username","SubmitButton","className","disabled","props","onClick","text","React","Component","InputField","type","placeholder","value","onChange","e","target","LoginForm","state","password","buttonDisabled","property","val","trim","replace","length","setState","fetch","method","headers","body","JSON","stringify","res","json","result","success","console","log","userExists","alert","resetForm","msg","UserStore","src","logo","alt","setInputValue","doLogin","handleSignUp","App","error","doLogout","observer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.7db8809b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/biscord.64b73548.png\";","import { extendObservable } from 'mobx';\n\n/**\n * UserStore\n */\n\n class UserStore {\n     constructor() {\n         extendObservable(this, {\n             loading: true,\n             isLoggedIn: false,\n             username: ''\n         })\n     }\n }\n\n export default new UserStore();","import React from 'react';\n\nclass SubmitButton extends React.Component {\n\n  render() {\n    return (\n      <div className=\"submitButton\">\n        <button\n            className = 'btn'\n            disabled = {this.props.disabled}\n            onClick = { () => this.props.onClick() }\n        >\n            {this.props.text}\n        </button>\n      </div>\n    );\n  }\n\n}\n\nexport default SubmitButton;\n","import React from 'react';\n\nclass InputField extends React.Component {\n\n  render() {\n    return (\n      <div className=\"inputField\">\n        <input\n            className = 'input'\n            type = {this.props.type}\n            placeholder = {this.props.placeholder}\n            value = {this.props.value}\n            onChange = { (e) => this.props.onChange(e.target.value) }\n        />\n      </div>\n    );\n  }\n\n}\n\nexport default InputField;\n","import React from 'react';\nimport InputField from '../InputField';\nimport SubmitButton from '../SubmitButton';\nimport UserStore from '../stores/UserStore';\n\nimport './LoginForm.css';\n\nimport logo from '../images/biscord.png';\n\nclass LoginForm extends React.Component {\n\n    constructor(props)\n    {\n        super(props)\n        this.state = {\n            username: '',\n            password: '',\n            buttonDisabled: false\n        }\n    }\n\n    setInputValue(property, val) {\n        val = val.trim();\n        val = val.replace(/[^A-Za-z0-9]/g, '');\n        if (val.length > 12) {\n            return;\n        }\n        \n        this.setState({\n            [property]: val\n        })\n\n    }\n\n    resetForm() {\n        this.setState({\n            username: '',\n            password: '',\n            buttonDisabled: false\n        })\n    }\n\n    async userExists(username)\n    {\n        try {\n            let res = await fetch('./userexists', {\n                method: 'post',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    username: this.state.username\n                })\n            })\n\n            let result = await res.json();\n\n            if (result.success)\n            {\n                return true;\n            }\n            else if (!result.success)\n            {\n                return false;\n            }\n        }\n        catch (e)\n        {\n            console.log(e);\n        }\n\n    }\n\n    async handleSignUp() {\n\n        let doesUserExist = await this.userExists();\n\n        if (doesUserExist == true)\n        {\n            alert(\"User already exists\");\n            this.resetForm();\n            return;\n        }\n\n        if (!this.state.username) {\n            return;\n        }\n\n        if (!this.state.password) {\n            return;\n        }\n\n        this.setState({\n            buttonDisabled: true\n        })\n\n        try {\n\n            let res = await fetch('./signup', {\n                method: 'post',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    username: this.state.username,\n                    password: this.state.password\n                })\n            })\n\n            // tell the user whether it failed or not\n            let result = await res.json();\n            this.resetForm();\n            alert(result.msg);\n\n        }\n\n        catch(e) {\n            console.log(e);\n            this.resetForm();\n        }\n\n    }\n\n    async doLogin() {\n\n        if (!this.state.username) {\n            return;\n        }\n\n        if (!this.state.password) {\n            return;\n        }\n\n        this.setState({\n            buttonDisabled: true\n        })\n\n        try {\n\n            let res = await fetch('./login', {\n                method: 'post',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    username: this.state.username,\n                    password: this.state.password\n                })\n            })\n\n            let result = await res.json();\n\n            if (result && result.success) {\n                UserStore.isLoggedIn = true;\n                UserStore.username = result.username;\n            }\n\n            else if (result && result.success === false){\n                this.resetForm();\n                alert(result.msg);\n            }\n\n        }\n\n        catch(e) {\n            console.log(e);\n            this.resetForm();\n        }\n\n    }\n\n  render() {\n    return (\n        <div className=\"LoginForm\">\n\n            <img className=\"logo\" src={logo} alt=\"\" />\n\n            <InputField\n                type = 'text'\n                placeholder = 'Username'\n                value = {this.state.username ? this.state.username : ''}\n                onChange = { (val) => this.setInputValue('username', val) }\n            />\n\n            <InputField\n                type = 'password'\n                placeholder = 'Password'\n                value = {this.state.password ? this.state.password : ''}\n                onChange = { (val) => this.setInputValue('password', val) }\n            />\n\n            <SubmitButton \n                text = 'Login'\n                disabled = {this.state.buttonDisabled}\n                onClick = { () => this.doLogin() }\n            />\n\n            <SubmitButton \n                text = 'Sign Up'\n                disabled = {this.state.buttonDisabled}\n                onClick = { () => this.handleSignUp() }\n            />\n        \n        </div>\n    );\n  }\n\n}\n\nexport default LoginForm;\n","import React from 'react';\nimport { observer } from 'mobx-react'; \nimport UserStore from './stores/UserStore';\nimport SubmitButton from './SubmitButton';\nimport LoginForm from './LoginForm/LoginForm';\nimport './App.css';\n\nclass App extends React.Component {\n\n  async componentDidMount() {\n    try {\n\n      let res = await fetch('/isLoggedIn', {\n        method: 'post',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      })\n\n      let result = await res.json();\n\n      if (result && result.success) {\n        UserStore.loading = false;\n        UserStore.isLoggedIn = true;\n        UserStore.username = result.username;\n      }\n\n      else {\n        UserStore.loading = false;\n        UserStore.isLoggedIn = false;\n      }\n\n    }\n\n    catch(e) {\n      UserStore.loading = false;\n      UserStore.isLoggedIn = false;\n    }\n  }\n\n  async doLogout() {\n    try {\n\n      let res = await fetch('/logout', {\n        method: 'post',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      })\n\n      let result = await res.json();\n\n      if (result && result.success) {\n        UserStore.isLoggedIn = false;\n        UserStore.username = '';\n      }\n    }\n\n    catch(e) {\n      console.error(e);\n    }\n  }\n\n  render() {\n\n    if (UserStore.loading) {\n      return (\n        <div className=\"app\">\n          <div className = 'container'>\n            Loading, please wait...\n          </div>\n        </div>\n      );\n    }\n\n    else {\n\n      if (UserStore.isLoggedIn) {\n        return (\n          <div className=\"app\">\n            <div className = 'container'>\n              Welcome {UserStore.username}\n              <SubmitButton\n                text={'Log Out'}\n                disabled={false}\n                onClick={() => this.doLogout()}\n              />\n            </div>\n          </div>\n        );\n      }\n\n      else {\n        return (\n          <div className=\"app\">\n            <div className = 'container'>\n              <LoginForm />\n            </div>\n          </div>\n        );\n      }\n\n    }\n\n  }\n\n}\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}